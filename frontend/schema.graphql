# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

interface Node {
  databaseId: UUID!
  id: ID!
}

type Asset implements Node {
  cacheTTL: Int!
  createdAt: DateTime!
  databaseId: UUID!
  folder: String!
  id: ID!
  mimeType: String!
  name: String!
  project: Project!
  projectId: ID!
  updatedAt: DateTime!
}

type AuthenticateUserPayload {
  token: String!
}

type Connection {
  edges: [Edge!]!
  nodes: [Node!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type CurrentUser {
  createdAt: DateTime!
  databaseId: UUID!
  email: String!
  firstName: String!
  id: ID!
  lastName: String!
  updatedAt: DateTime!
}

type Edge {
  cursor: ID!
  node: Node!
}

type File implements Node {
  cacheTTL: Int!
  content: String!
  createdAt: DateTime!
  databaseId: UUID!
  folder: String!
  id: ID!
  mimeType: String!
  name: String!
  project: Project!
  projectId: ID!
  updatedAt: DateTime!
  variables(after: ID, before: ID, first: Int, last: Int, orderBy: FileVariableOrder = {direction : DESC, field : CREATED_AT}): Connection!
}

type FileVariable implements Node {
  createdAt: DateTime!
  databaseId: UUID!
  file: File!
  fileId: ID!
  id: ID!
  updatedAt: DateTime!
  value: String!
  variable: Variable!
  variableId: ID!
}

type Icon implements Node {
  content: String!
  createdAt: DateTime!
  databaseId: UUID!
  id: ID!
  name: String!
  project: Project!
  projectId: ID!
  updatedAt: DateTime!
  variableName: String!
}

type Layout implements Node {
  bodyCode: String!
  createdAt: DateTime!
  databaseId: UUID!
  headCode: String!
  id: ID!
  name: String!
  project: Project!
  projectId: ID!
  scripts: String!
  styles: String!
  updatedAt: DateTime!
  variables(after: ID, before: ID, first: Int, last: Int, orderBy: LayoutVariableOrder = {direction : DESC, field : CREATED_AT}): Connection!
}

type LayoutVariable implements Node {
  createdAt: DateTime!
  databaseId: UUID!
  id: ID!
  layout: Layout!
  layoutId: ID!
  updatedAt: DateTime!
  value: String!
  variable: Variable!
  variableId: ID!
}

type Mutation {
  authenticateUser(input: AuthenticateUserInput!): AuthenticateUserPayload!
  createAsset(input: CreateAssetInput!): Asset!
  createFile(input: CreateFileInput!): File!
  createIcon(input: CreateIconInput!): Icon!
  createLayout(input: CreateLayoutInput!): Layout!
  createPage(input: CreatePageInput!): Page!
  createProject(input: CreateProjectInput!): Project!
  createVariable(input: CreateVariableInput!): Variable!
  deleteAsset(id: ID!): Asset!
  deleteFile(id: ID!): File!
  deleteIcon(id: ID!): Icon!
  deleteLayout(id: ID!): Layout!
  deletePage(id: ID!): Page!
  deleteProject(id: ID!): Project!
  deleteVariable(id: ID!): Variable!
  publishPage(id: ID!): Page!
  updateAsset(id: ID!, input: UpdateAssetInput!): Asset!
  updateFile(id: ID!, input: UpdateFileInput!): File!
  updateIcon(id: ID!, input: UpdateIconInput!): Icon!
  updateLayout(id: ID!, input: UpdateLayoutInput!): Layout!
  updatePage(id: ID!, input: UpdatePageInput!): Page!
  updateProject(id: ID!, input: UpdateProjectInput!): Project!
  updateVariable(id: ID!, input: UpdateVariableInput!): Variable!
}

type Page implements Node {
  bodyCode: String!
  createdAt: DateTime!
  databaseId: UUID!
  folder: String!
  headCode: String!
  id: ID!
  layout: Layout!
  layoutId: ID!
  name: String!
  project: Project!
  projectId: ID!
  publishedAt: DateTime
  scripts: String!
  slug: String!
  styles: String!
  updatedAt: DateTime!
  variables(after: ID, before: ID, first: Int, last: Int, orderBy: PageVariableOrder = {direction : DESC, field : CREATED_AT}): Connection!
}

type PageInfo {
  endCursor: ID
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: ID
}

type PageVariable implements Node {
  createdAt: DateTime!
  databaseId: UUID!
  id: ID!
  page: Page!
  pageId: ID!
  updatedAt: DateTime!
  value: String!
  variable: Variable!
  variableId: ID!
}

type Project implements Node {
  bucketConfigAWS: ProjectBucketConfigAWS
  bucketProvider: ProjectBucketProvider!
  cdnConfigCloudflare: ProjectCDNConfigCloudflare
  cdnProvider: ProjectCDNProvider
  createdAt: DateTime!
  databaseId: UUID!
  description: String!
  globalBodyCode: String!
  globalHeadCode: String!
  globalScripts: String!
  globalStyles: String!
  id: ID!
  name: String!
  publicURL: String!
  updatedAt: DateTime!
  user: User!
  userId: ID!
  variables(after: ID, before: ID, first: Int, last: Int, orderBy: ProjectVariableOrder = {direction : DESC, field : CREATED_AT}): Connection!
}

type ProjectBucketConfigAWS {
  accessKeyId: String!
  bucketName: String!
  secretAccessKey: String!
}

type ProjectCDNConfigCloudflare {
  apiToken: String!
  zoneId: String!
}

type ProjectVariable implements Node {
  createdAt: DateTime!
  databaseId: UUID!
  id: ID!
  project: Project!
  projectId: ID!
  updatedAt: DateTime!
  value: String!
  variable: Variable!
  variableId: ID!
}

type Query {
  assets(after: ID, before: ID, first: Int, last: Int, orderBy: AssetOrder = {direction : DESC, field : CREATED_AT}, projectId: ID!): Connection!
  currentUser: CurrentUser!
  files(after: ID, before: ID, first: Int, last: Int, orderBy: FileOrder = {direction : DESC, field : CREATED_AT}, projectId: ID!): Connection!
  icons(after: ID, before: ID, first: Int, last: Int, orderBy: IconOrder = {direction : DESC, field : CREATED_AT}, projectId: ID!): Connection!
  layouts(after: ID, before: ID, first: Int, last: Int, orderBy: LayoutOrder = {direction : DESC, field : CREATED_AT}, projectId: ID!): Connection!
  node(id: ID!): Node!
  pages(after: ID, before: ID, first: Int, last: Int, orderBy: PageOrder = {direction : DESC, field : CREATED_AT}, projectId: ID!): Connection!
  projects(after: ID, before: ID, first: Int, last: Int, orderBy: ProjectOrder = {direction : DESC, field : CREATED_AT}): Connection!
  variables(after: ID, before: ID, first: Int, last: Int, orderBy: VariableOrder = {direction : DESC, field : CREATED_AT}, projectId: ID!): Connection!
}

type User {
  createdAt: DateTime!
  databaseId: UUID!
  firstName: String!
  id: ID!
  lastName: String!
  updatedAt: DateTime!
}

type Variable implements Node {
  createdAt: DateTime!
  databaseId: UUID!
  id: ID!
  name: String!
  project: Project!
  projectId: ID!
  updatedAt: DateTime!
}

enum AssetOrderField {
  CREATED_AT
  FOLDER
  NAME
  UPDATED_AT
}

enum FileOrderField {
  CREATED_AT
  FOLDER
  NAME
  UPDATED_AT
}

enum FileVariableOrderField {
  CREATED_AT
  UPDATED_AT
}

enum IconOrderField {
  CREATED_AT
  NAME
  UPDATED_AT
  VARIABLE_NAME
}

enum LayoutOrderField {
  CREATED_AT
  NAME
  UPDATED_AT
}

enum LayoutVariableOrderField {
  CREATED_AT
  UPDATED_AT
}

enum OrderDirection {
  ASC
  DESC
}

enum PageOrderField {
  CREATED_AT
  FOLDER
  NAME
  PUBLISHED_AT
  SLUG
  UPDATED_AT
}

enum PageVariableOrderField {
  CREATED_AT
  UPDATED_AT
}

enum ProjectBucketProvider {
  AWS
}

enum ProjectCDNProvider {
  CLOUDFLARE
}

enum ProjectOrderField {
  CREATED_AT
  DESCRIPTION
  NAME
  PUBLIC_URL
  UPDATED_AT
}

enum ProjectVariableOrderField {
  CREATED_AT
  UPDATED_AT
}

enum VariableOrderField {
  CREATED_AT
  NAME
  UPDATED_AT
}

input AssetOrder {
  direction: OrderDirection!
  field: AssetOrderField!
}

input AuthenticateUserInput {
  email: String!
  password: String!
}

input CreateAssetInput {
  cacheTTL: Int!
  file: Upload!
  folder: String!
  mimeType: String!
  name: String!
  projectId: ID!
}

input CreateFileInput {
  cacheTTL: Int!
  content: String!
  folder: String!
  mimeType: String!
  name: String!
  projectId: ID!
  variables: [FileVariableInput!]!
}

input CreateIconInput {
  content: String!
  name: String!
  projectId: ID!
}

input CreateLayoutInput {
  bodyCode: String!
  headCode: String!
  name: String!
  projectId: ID!
  scripts: String!
  styles: String!
  variables: [LayoutVariableInput!]!
}

input CreatePageInput {
  bodyCode: String!
  folder: String!
  headCode: String!
  layoutId: ID!
  name: String!
  projectId: ID!
  scripts: String!
  slug: String!
  styles: String!
  variables: [PageVariableInput!]!
}

input CreateProjectInput {
  bucketConfigAWS: ProjectBucketConfigAWSInput
  bucketProvider: ProjectBucketProvider!
  cdnConfigCloudflare: ProjectCDNConfigCloudflareInput
  cdnProvider: ProjectCDNProvider
  description: String!
  globalBodyCode: String!
  globalHeadCode: String!
  globalScripts: String!
  globalStyles: String!
  name: String!
  publicURL: String!
}

input CreateVariableInput {
  name: String!
  projectId: ID!
}

input FileOrder {
  direction: OrderDirection!
  field: FileOrderField!
}

input FileVariableInput {
  id: ID!
  value: String!
}

input FileVariableOrder {
  direction: OrderDirection!
  field: FileVariableOrderField!
}

input IconOrder {
  direction: OrderDirection!
  field: IconOrderField!
}

input LayoutOrder {
  direction: OrderDirection!
  field: LayoutOrderField!
}

input LayoutVariableInput {
  id: ID!
  value: String!
}

input LayoutVariableOrder {
  direction: OrderDirection!
  field: LayoutVariableOrderField!
}

input PageOrder {
  direction: OrderDirection!
  field: PageOrderField!
}

input PageVariableInput {
  id: ID!
  value: String!
}

input PageVariableOrder {
  direction: OrderDirection!
  field: PageVariableOrderField!
}

input ProjectBucketConfigAWSInput {
  accessKeyId: String!
  bucketName: String!
  secretAccessKey: String!
}

input ProjectCDNConfigCloudflareInput {
  apiToken: String!
  zoneId: String!
}

input ProjectOrder {
  direction: OrderDirection!
  field: ProjectOrderField!
}

input ProjectVariableInput {
  id: ID!
  value: String!
}

input ProjectVariableOrder {
  direction: OrderDirection!
  field: ProjectVariableOrderField!
}

input UpdateAssetInput {
  cacheTTL: Int!
  folder: String!
  mimeType: String!
  name: String!
}

input UpdateFileInput {
  cacheTTL: Int!
  content: String!
  folder: String!
  mimeType: String!
  name: String!
  variables: [FileVariableInput!]!
}

input UpdateIconInput {
  content: String!
  name: String!
}

input UpdateLayoutInput {
  bodyCode: String!
  headCode: String!
  name: String!
  scripts: String!
  styles: String!
  variables: [LayoutVariableInput!]!
}

input UpdatePageInput {
  bodyCode: String!
  headCode: String!
  layoutId: ID!
  name: String!
  scripts: String!
  styles: String!
  variables: [PageVariableInput!]!
}

input UpdateProjectInput {
  bucketConfigAWS: ProjectBucketConfigAWSInput
  bucketProvider: ProjectBucketProvider!
  cdnConfigCloudflare: ProjectCDNConfigCloudflareInput
  cdnProvider: ProjectCDNProvider
  description: String!
  globalBodyCode: String!
  globalHeadCode: String!
  globalScripts: String!
  globalStyles: String!
  name: String!
  publicURL: String!
  variables: [ProjectVariableInput!]!
}

input UpdateVariableInput {
  name: String!
}

input VariableOrder {
  direction: OrderDirection!
  field: VariableOrderField!
}

scalar DateTime
scalar UUID
scalar Upload
